import React, { useRef, useMemo, useEffect, useState } from 'react';
import PropTypes from 'prop-types';
import styled from 'styled-components';

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

function __rest(s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
}

function __spreadArray(to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
}

function __makeTemplateObject(cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
}

var PinInputContainer = styled.div(templateObject_1$1 || (templateObject_1$1 = __makeTemplateObject(["\n  display: flex;\n  align-items: center;\n"], ["\n  display: flex;\n  align-items: center;\n"])));
var templateObject_1$1;

var pinInputDefaultProps = {
    type: 'number',
    mask: false,
    showState: true,
    size: 'md',
    autoFocus: false,
    autoTab: true,
    borderColor: 'rgb(204,204,204)',
    errorBorderColor: 'rgb(220,53,69)',
    focusBorderColor: 'rgb(13,110,253)',
    validBorderColor: 'rgb(25,135,84)',
    containerStyle: {},
    inputStyle: {},
    autoComplete: 'off',
    placeholder: 'o',
    'aria-label': 'Please enter pin code',
};

var validateToPattern = function (validate) {
    if (Array.isArray(validate)) {
        var regex = new RegExp(validate.join('|')).toString();
        return regex.slice(1, regex.length - 1);
    }
    else if (typeof validate === 'string') {
        var regex = new RegExp(validate.split('').join('|')).toString();
        return regex.slice(1, regex.length - 1);
    }
    else if (validate instanceof RegExp) {
        var regex = validate.toString();
        return regex.slice(1, regex.length - 1);
    }
    else {
        return undefined;
    }
};
var colorParser = function (color) {
    if (color === undefined)
        return null;
    var match = color.match(/^rgb\((\d{1,3}),\s*(\d{1,3}),\s*(\d{1,3})\)$/);
    if (match) {
        return {
            r: Number(match[1]),
            g: Number(match[2]),
            b: Number(match[3]),
        };
    }
    else {
        var shorthand = /^#?[a-fA-Z\d]{3}$/i.test(color);
        var result = shorthand
            ? /^#?([a-f\d])([a-f\d])([a-f\d])$/i.exec(color)
            : /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(color);
        return result
            ? {
                r: parseInt(shorthand ? result[1] + result[1] : result[1], 16),
                g: parseInt(shorthand ? result[2] + result[2] : result[2], 16),
                b: parseInt(shorthand ? result[3] + result[3] : result[3], 16),
            }
            : null;
    }
};

var Input = styled.input(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n  width: ", ";\n  height: ", ";\n  margin-right: 0.375rem;\n  outline: transparent solid 2px;\n  outline-offset: 2px;\n  font-size: ", ";\n  text-align: center;\n  border-radius: 0.375rem;\n  border-width: 1px;\n  border-style: solid;\n  border-color: ", ";\n  background-color: inherit;\n  box-sizing: border-box;\n  &:focus {\n    border-color: ", ";\n    box-shadow: ", " 0px 0px 0px 1px;\n  }\n  &:last-child {\n    margin-right: 0;\n  }\n  ", "\n  ", "\n  &:disabled {\n    opacity: 0.5;\n    cursor: not-allowed;\n  }\n"], ["\n  width: ", ";\n  height: ", ";\n  margin-right: 0.375rem;\n  outline: transparent solid 2px;\n  outline-offset: 2px;\n  font-size: ", ";\n  text-align: center;\n  border-radius: 0.375rem;\n  border-width: 1px;\n  border-style: solid;\n  border-color: ", ";\n  background-color: inherit;\n  box-sizing: border-box;\n  &:focus {\n    border-color: ", ";\n    box-shadow: ", " 0px 0px 0px 1px;\n  }\n  &:last-child {\n    margin-right: 0;\n  }\n  ", "\n  ", "\n  &:disabled {\n    opacity: 0.5;\n    cursor: not-allowed;\n  }\n"])), function (_a) {
    var $sizing = _a.$sizing;
    switch ($sizing) {
        case 'xs':
            return '1.5rem';
        case 'sm':
            return '2rem';
        case 'md':
            return '2.5rem';
        case 'lg':
            return '3rem';
    }
}, function (_a) {
    var $sizing = _a.$sizing;
    switch ($sizing) {
        case 'xs':
            return '1.5rem';
        case 'sm':
            return '2rem';
        case 'md':
            return '2.5rem';
        case 'lg':
            return '3rem';
    }
}, function (_a) {
    var $sizing = _a.$sizing;
    switch ($sizing) {
        case 'xs':
            return '0.75rem';
        case 'sm':
            return '0.875rem';
        case 'md':
            return '1rem';
        case 'lg':
            return '1.125rem';
    }
}, function (_a) {
    var $borderColor = _a.$borderColor;
    var rgb = colorParser($borderColor);
    return rgb
        ? "rgb(".concat(rgb.r, ",").concat(rgb.g, ",").concat(rgb.b, ")")
        : pinInputDefaultProps.borderColor;
}, function (_a) {
    var $focusBorderColor = _a.$focusBorderColor;
    var rgb = colorParser($focusBorderColor);
    return rgb
        ? "rgb(".concat(rgb.r, ",").concat(rgb.g, ",").concat(rgb.b, ")")
        : pinInputDefaultProps.focusBorderColor;
}, function (_a) {
    var $focusBorderColor = _a.$focusBorderColor;
    return $focusBorderColor;
}, function (_a) {
    var $completed = _a.$completed, $showState = _a.$showState, $validBorderColor = _a.$validBorderColor;
    var rgb = colorParser($validBorderColor);
    return $completed && $showState
        ? "&:valid {\n    border-color: ".concat(rgb
            ? "rgb(".concat(rgb.r, ",").concat(rgb.g, ",").concat(rgb.b, ")")
            : pinInputDefaultProps.validBorderColor, ";\n    box-shadow: ").concat(rgb
            ? "rgb(".concat(rgb.r, ",").concat(rgb.g, ",").concat(rgb.b, ")")
            : pinInputDefaultProps.validBorderColor, " 0px 0px 0px 1px;\n    background-color: ").concat(rgb
            ? "rgba(".concat(rgb.r, ",").concat(rgb.g, ",").concat(rgb.b, ",0.1)")
            : pinInputDefaultProps.validBorderColor
                .replace('rgb', 'rgba')
                .replace(')', ',0.1)'), ";\n  }")
        : '';
}, function (_a) {
    var $showState = _a.$showState, $errorBorderColor = _a.$errorBorderColor;
    var rgb = colorParser($errorBorderColor);
    return $showState
        ? "&:invalid {\n    border-color: ".concat(rgb
            ? "rgb(".concat(rgb.r, ",").concat(rgb.g, ",").concat(rgb.b, ")")
            : pinInputDefaultProps.errorBorderColor, ";\n    box-shadow: ").concat(rgb
            ? "rgb(".concat(rgb.r, ",").concat(rgb.g, ",").concat(rgb.b, ")")
            : pinInputDefaultProps.errorBorderColor, " 0px 0px 0px 1px;\n    background-color: ").concat(rgb
            ? "rgba(".concat(rgb.r, ",").concat(rgb.g, ",").concat(rgb.b, ",0.1)")
            : pinInputDefaultProps.errorBorderColor
                .replace('rgb', 'rgba')
                .replace(')', ',0.1)'), ";\n  }")
        : '';
});
var templateObject_1;

var propTypes$2 = {
    index: PropTypes.number,
    values: PropTypes.arrayOf(PropTypes.string),
    onChange: PropTypes.func,
};
var normalizeNewValue = function (currentValue, eventValue) {
    if (!currentValue) {
        return eventValue.split('');
    }
    if (eventValue.length > 2) {
        return eventValue.split('');
    }
    if (eventValue === '') {
        return [];
    }
    if (currentValue[0] === eventValue[0]) {
        return [eventValue[1]];
    }
    return [eventValue[0]];
};
var PinInputField = function (_a) {
    var index = _a.index, value = _a.value, values = _a.values, completed = _a.completed, type = _a.type, mask = _a.mask, size = _a.size, validate = _a.validate, format = _a.format, showState = _a.showState, autoFocus = _a.autoFocus, autoTab = _a.autoTab, ariaDescribedby = _a["aria-describedby"], ariaLabel = _a["aria-label"], ariaLabelledby = _a["aria-labelledby"], autoComplete = _a.autoComplete, disabled = _a.disabled, inputMode = _a.inputMode, id = _a.id, name = _a.name, placeholder = _a.placeholder, required = _a.required, inputClassName = _a.inputClassName, inputStyle = _a.inputStyle, borderColor = _a.borderColor, errorBorderColor = _a.errorBorderColor, focusBorderColor = _a.focusBorderColor, validBorderColor = _a.validBorderColor, onChange = _a.onChange, onBlur = _a.onBlur, onFocus = _a.onFocus, onKeyDown = _a.onKeyDown;
    var inputRef = useRef();
    var handleInputChange = function (e) {
        var currentValue = values[index];
        var eventValue = e.target.value;
        var newValues = __spreadArray([], values);
        var rawValue = normalizeNewValue(currentValue, eventValue).slice(0, newValues.length - index);
        var regex = type === 'number' ? /(^$)|(\d+)/ : /.*/;
        var shouldFireChange = rawValue.every(function (val) { return regex.test(val); });
        if (!onChange) {
            return;
        }
        // apply formatter to transform
        var newValue = format ? rawValue.map(function (val) { return format(val); }) : rawValue;
        if (newValue.length) {
            newValue.forEach(function (val, idx) { return (newValues[index + idx] = val); });
        }
        else {
            newValues[index] = '';
        }
        if (!shouldFireChange) {
            return;
        }
        onChange(newValue, index, newValues);
        // auto-tab to the specified pin input
        var inputEl = inputRef.current;
        for (var i = 0; i < newValue.length; i++) {
            inputEl = inputEl.nextElementSibling;
        }
        if (newValue && autoTab && inputEl instanceof HTMLInputElement) {
            inputEl.focus();
        }
    };
    var handleKeyDown = function (e) {
        if (e.key === 'Backspace' && autoTab && values[index] === '' && index > 0) {
            var prevInput = inputRef.current.previousElementSibling;
            if (prevInput instanceof HTMLInputElement) {
                prevInput.focus();
            }
        }
        if (onKeyDown) {
            onKeyDown(e);
        }
    };
    var handleInputFocus = function (e) {
        e.target.placeholder = '';
        if (onFocus) {
            onFocus(e);
        }
    };
    var handleInputBlur = function (e) {
        e.target.placeholder = placeholder;
        if (onBlur) {
            onBlur(e);
        }
    };
    var pattern = useMemo(function () { return validateToPattern(validate); }, [validate]);
    // auto-focus on mount
    useEffect(function () {
        if (autoFocus && index === 0) {
            inputRef.current.focus();
        }
    }, [autoFocus, index]);
    return (React.createElement(Input, { ref: inputRef, type: mask ? 'password' : 'text', "aria-describedby": ariaDescribedby, "aria-disabled": disabled, "aria-label": ariaLabel, "aria-labelledby": ariaLabelledby, "aria-required": required, autoComplete: autoComplete, disabled: disabled, name: name, id: id && "".concat(id, "-").concat(index), className: inputClassName, inputMode: inputMode || (type === 'number' ? 'numeric' : 'text'), required: required, placeholder: placeholder, pattern: pattern, value: value, onChange: handleInputChange, onKeyDown: handleKeyDown, onFocus: handleInputFocus, onBlur: handleInputBlur, "$completed": completed, "$showState": showState, "$sizing": size, style: inputStyle, "$borderColor": borderColor, "$errorBorderColor": errorBorderColor, "$focusBorderColor": focusBorderColor, "$validBorderColor": validBorderColor, "data-index": index }));
};
PinInputField.displayName = 'PinInputField';
PinInputField.propTypes = propTypes$2;

var propTypes$1 = {
    values: PropTypes.arrayOf(PropTypes.string).isRequired,
    type: PropTypes.oneOf(['number', 'text']),
    mask: PropTypes.bool,
    validate: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.arrayOf(PropTypes.string),
        PropTypes.instanceOf(RegExp),
    ]),
    format: PropTypes.func,
    showState: PropTypes.bool,
    size: PropTypes.oneOf(['xs', 'sm', 'md', 'lg']),
    autoFocus: PropTypes.bool,
    autoTab: PropTypes.bool,
    containerClassName: PropTypes.string,
    containerStyle: PropTypes.object,
    inputClassName: PropTypes.string,
    inputStyle: PropTypes.object,
    onChange: PropTypes.func,
};
var PinInput = function (props) {
    var completed = useMemo(function () { return props.values.every(function (val) { return val; }); }, [props.values]);
    if (completed && props.onComplete) {
        if (props.validate) {
            if (props.values.every(function (val) {
                return new RegExp(validateToPattern(props.validate)).test(val);
            })) {
                props.onComplete(props.values);
            }
        }
        else {
            props.onComplete(props.values);
        }
    }
    return (React.createElement(PinInputContainer, { className: props.containerClassName, style: props.containerStyle }, props.values.map(function (value, i) { return (React.createElement(PinInputField, __assign({ key: props.id ? "".concat(props.id, "-").concat(i) : i, index: i, value: value, completed: completed }, props))); })));
};
PinInput.displayName = 'PinInput';
PinInput.propTypes = propTypes$1;
PinInput.defaultProps = pinInputDefaultProps;

var propTypes = {
    length: PropTypes.number,
    initialValue: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.arrayOf(PropTypes.string),
    ]),
    type: PropTypes.oneOf(['number', 'text']),
    mask: PropTypes.bool,
    validate: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.arrayOf(PropTypes.string),
        PropTypes.instanceOf(RegExp),
    ]),
    format: PropTypes.func,
    showState: PropTypes.bool,
    size: PropTypes.oneOf(['xs', 'sm', 'md', 'lg']),
    autoFocus: PropTypes.bool,
    autoTab: PropTypes.bool,
    containerStyle: PropTypes.object,
    inputStyle: PropTypes.object,
    onChange: PropTypes.func,
};
var StatefulPinInput = function (_a) {
    var length = _a.length, initialValue = _a.initialValue, onChange = _a.onChange, props = __rest(_a, ["length", "initialValue", "onChange"]);
    var _b = useState(Array.from({ length: length }, function (_v, i) { return initialValue[i] || ''; })), values = _b[0], setValues = _b[1];
    var handleInputChange = function (value, index, values) {
        setValues(values);
        if (onChange) {
            onChange(value, index, values);
        }
    };
    return React.createElement(PinInput, __assign({ values: values, onChange: handleInputChange }, props));
};
StatefulPinInput.displayName = 'StatefulPinInput';
StatefulPinInput.propTypes = propTypes;
StatefulPinInput.defaultProps = {
    length: 4,
    initialValue: '',
    type: 'number',
    mask: false,
    showState: true,
    size: 'md',
    autoFocus: false,
    autoTab: true,
    containerStyle: {},
    inputStyle: {},
    autoComplete: 'off',
    placeholder: 'o',
    'aria-label': 'Please enter pin code',
};

export { PinInput, StatefulPinInput };
